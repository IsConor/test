一、模板的概念？
1.什么是泛型编程？
泛型编程 ->一个具有通用性的程序，能够在广泛的场景下使用
这个程序可以理解为就是一个通用的模板

2.什么是模板？
泛型编程就是利用模板的技术来进行编程。
模板就是建立通用的模具，大大提高复用性。
例如：ppt模板、照片模板

3.模板有什么特点？
1）模板不可以直接使用，它只是一个框架而已
2）模板的通用并不是万能的。

===========================================================================================================================================


二、函数模板
C++中提供了两种模板机制：函数模板和类模板。

1。函数模板的作用？
建立一个通用的函数，其返回值类型和形参类型可以不具体指定，用一个虚拟的类来代表

2.语法：
template<typename T>
函数的声明或者定义

解析：
template   ->  声明创建模板
typename   ->  表明后面的符号是一种数据类型，可以使用class来代替
T          ->    通用数据类型，名称可以替换，通常为大写字母。

//函数模板
template<typename T>
void mySwap(T& a, T& b)
{
	T temp = a;
	a = b;
	b = temp;
}

//1.自动类型的推导
	//mySwap(a, b);	//自动推导出来T就是int

	//2.显示指定类型
	mySwap<int>(a, b);

总结：
1）函数模板利用关键字 template
2）使用函数模板有两种方式：自动类型推导，显示指定类型
3）模板的目的是为了提高复用性，将类型参数化。


===========================================================================================================================================

三、函数模板的注意事项
注意事项：
1）自动类型推导，必须推导出一致的数据类型，才可以使用。
2）模板必须确定出T的数据类型才可以使用。
#include <iostream>
using namespace std;

//函数模板的注意事项
template<typename T>
void mySwap(T &a, T &b)
{
	T temp = a;
	a = b;
	b = temp;
}
 
//1）自动类型推导，必须推导出一致的数据类型，才可以使用。
void test01()
{
	int a = 10;
	int b = 20;
	char c = 'c';

	//mySwap(a, b); //自动推导出来 T -> int
	//mySwap(a, c); //编译出错，因为推导不出来一致的数据类型

	cout << "a = " << a << endl;
	cout << "b = " << b << endl;
	cout << "c = " << c << endl;
}

//2）模板必须确定出T的数据类型才可以使用。
template<class T>
void func()
{
	cout << "func()的调用" << endl;
}

void test02()
{
	//func();		//未指定T的数据类型，因而编译器无法推导出T的类型
	func<int>();	//利用显示指定类型的办法来将T的类型指明
}


int main()
{
	test02();

	return 0;
}

总结：
	使用模板时必须确定出数据类型T，并且能够推导出一致的数据类型

======================================================================================================================================

四、普通函数与函数模板的区别？
1）普通函数调用时可以发生自动类型转换。（隐式类型转换）。
2）函数模板调用时，如果利用自动类型推导，不可以发生隐式类型转换。
3）如果利用显示指定类型方式，可以发生隐式类型转换。

#include <iostream>
using namespace std;

//普通函数
int myAdd01(int a, int b)
{
	return a + b;
}

//函数模板
template<class T>
int myAdd02(T a, T b)
{
	return a + b;
}

int main()
{
	int a = 10;
	int b = 20;
	char c = 'c';

	//1）普通函数调用时可以发生自动类型转换。（隐式类型转换）
	cout << myAdd01(a, b) << endl;	//30
	cout << myAdd01(a, c) << endl;	//109

	//2）函数模板调用时，如果利用自动类型推导，不可以发生隐式类型转换。
	cout << myAdd02(a, b) << endl; //30
	//cout << myAdd02(a, c) << endl;	//报错 因为推到不出来一致的数据类型

	//3）如果利用显示指定类型方式，可以发生隐式类型转换。
	cout << myAdd02<int>(a, c) << endl; //109  非常明确的告诉编译器，C就是int，所以可以拿到109


	return 0;
}

总结：建议使用显式指定类型的方式调用函数模板，因为可以自己确定通用的类型T

=======================================================================================================================================

五、普通函数与函数模板的调用规则
调用的规则如下
1）如果函数模板和普通函数都可以实现，优先会调用普通函数。
2）可以通过空模板参数列表强制调用函数模板。
3）函数模板可以发生重载
4）如果函数模板可以产生更好的匹配，优先调用函数模板。

#include <iostream>
using namespace std;

//普通函数
void myPrint(int a, int b)
{
	cout << "普通函数的调用" << endl;
}

//函数模板
template<class T>
void myPrint(T a, T b)
{
	cout << "函数模板的调用" << endl;
}

template<class T>
void myPrint(T a, T b, T c)
{
	cout << "调用的是重载的函数模板" << endl;
}

int main()
{
	int a = 10;
	int b = 20;

	//1.如果函数模板和普通函数都能实现，有限调用普通函数
	myPrint(a, b); //普通函数的调用

	//2.可以通过空模板参数列表强制调用函数模板
	myPrint<>(a, b); //函数模板的调用

	//3.函数模板可以发生重载
	myPrint<>(a, b);
	myPrint<>(a, b, 100);

	//4.如果函数模板可以产生更好的匹配，优先调用函数模板
	char c1 = 'a';
	char c2 = 'b';
	myPrint(c1,c2); //函数模板的调用,因为函数模板直接推断出来T就是char，而普通函数还要将char转换为int之后才能计算

	return 0;
}

总结：既然提供了函数模板就不要提供普通函数了，否则容易出现二义性

===================================================================================================================================

六、模板的局限性
template<nametype T>
void func(T a, T b)
{
	
}
C++为了提供类的模板，提供了模板的重载，可以为这些特定的数据类型提供具体化的模板。

#include<iostream>
using namespace std;

//模板的局限性

class Person {
public:
	Person(string name, int age)
	{
		this->m_Name = name;
		this->m_Age = age;
	}

	string m_Name;	
	int m_Age;
};

//对比两个数据是否相同
template<class T>
bool myCompare(T &a, T &b)
{
	if (a == b)
	{
		return true;
	}
	else {
		return false;
	}
}

//需要使用具体化的方式做特殊的实现
template<> bool myCompare(Person& p1, Person& p2)
{
	if (p1.m_Name == p2.m_Name && p1.m_Age == p2.m_Age)
	{
		return true;
	}
	else {
		return false;
	}
}

void test01()
{
	int a = 10;
	int b = 20;

	bool ret = myCompare(a, b);
	if (ret)
	{
		cout << "a == b " << endl;
	}
	else {
		cout << "a != b " << endl;
	}
}

void test02()
{
	Person p1("TOM",18);
	Person p2("JACK",18);

	bool ret = myCompare(p1, p2);
	if (ret)
	{
		cout << "p1 == p2 " << endl;
	}
	else {
		cout << "p1 != p2 " << endl;
	}
}

int main()
{
	//test01();
	test02();

	return 0;
}

总结：
利用具体化的模板，可以解决自定义数据类型的通用化。
学习模板不是为了写模板，而是在STL中能够运行系统提供模板

====================================================================================================================================

七、类模板
1.类模板的作用？
建立一个通用类，类中的成员数据类型可以不具体指定，用一个虚拟的类型来代表。

2.类模板的语法？
template<typename T>
类

解析：
template  ->  声明创建一个模板
typename  ->  声明其后面的符号是一种数据类型，可以使用class来代替。
T  	        ->    通用的数据类型，名称可以替换，通常为大写字母


#include <iostream>
using namespace std;

//类模板
template<class Nametype,class Agetype>
class Person {
public:
	Person(Nametype name, Agetype age)
	{
		this->m_Name = name;
		this->m_Age = age;
	}

	void showPerson()
	{
		cout << "name = " << this->m_Name << endl;
		cout << "age = " << this->m_Age << endl;
	}

	Nametype m_Name;
	Agetype m_Age;
};


int main()
{
	Person<string,int> p("TOM",100);
	p.showPerson();


	return 0;
}

==================================================================================================================================

八、类模板与函数模板的区别？
主要有两点：
1）类模板没有自动类型推导的使用方式。
2）类模板在模板参数列表中可以有默认参数

#include <iostream>
using namespace std;

//类模板与函数模板的区别

template<class Nametype, class Agetype = int>
class Person {
public:
	Person(Nametype name, Agetype age)
	{
		this->m_Name = name;
		this->m_Age = age;
	}

	void showPerson()
	{
		cout << "name = " << this->m_Name << endl;
		cout << "age = " << this->m_Age << endl;
	}

	Nametype m_Name;
	Agetype m_Age;
};

void test01()
{
	//Person p("Tom",18);	err  类模板没有自动类型推导的使用方式
	Person<string, int>p("Tom", 20);
	p.showPerson();
}

void test02()
{
	Person<string>p1("Rose",90);
	p1.showPerson();
}

int main()
{
	//test01();

	test02();

	return 0;
}


总结：类模板只能使用显式指定类型的方式

======================================================================================================================================

九、类模板中成员函数的创建时机
类模板中成员函数和普通类的成员函数创建时机是有区别的。
1）普通类的成员函数一开始就创建了
2）类模板中的成员函数在调用时才会创建

#include <iostream>
using namespace std;

//类模板成员函数创建时机

//普通类
class Person1 {
public:
	void showPerson1()
	{
		cout << "Person1的 show" << endl;
	}
};

//普通类
class Person2 {
public:
	void showPerson2()
	{
		cout << "Person2的 show" << endl;
	}
};

//类模板
template<class T>
class Myclass {
public:
	//问题  既然不知道T的类型是什么，那么假设T是Person1，那么obj.showPerson2()不是有错误吗？
	//								 那么假设T是Person2，那么obj.showPerson1()不是有错误吗
	//但是编译通过说明语法没问题,
	//答案：类模板中的成员函数func1和func2在一开始是隐藏的，在调用的时候才会创建。
	void func1()
	{
		obj.showPerson1();
	}

	void func2()
	{
		obj.showPerson2();
	}

	T obj;	//编译的时候，编译器还不知道T是什么类型
};

int main()
{
	Myclass<Person1> m;  //确定了T的类型是Person1，未调用成员函数，编译通过
	
	m.func1();				

	//m.func2();		//编译出错，调用了成员函数func2()，那么func2()就会创建，所以编译器就可以看到func2()的实现过程
						//就会发现obj是Person1，然而Person1类中并没有showPerson2(); 所以编译出错。
	
	return 0;
}


===================================================================================================================================

十、类模板的对象做函数的参数
类模板实例化出来的对象，向函数传参的方式一共有三种方式。

1.指定传入的类型     -----   直接显示对象的数据类型 （最常用）

2.参数模板化             -----   将对象中的参数变为模板进行传递

3.整个类模板化         -----  将这个对象的类型模板化进行传递

#include <iostream>
using namespace std;
#include <typeinfo>

//类模板的对象做函数的参数
template<class T1, class T2>
class Person {
public:
	Person(T1 name, T2 age)
	{
		this->m_Name = name;
		this->m_Age = age;
	}

	void showPerson()
	{
		cout << "name = " << this->m_Name << "  age = " << this->m_Age << endl;
	}

	T1 m_Name;
	T2 m_Age;
};

//1.指定传入的类型(常用)
void printPerson1(Person<string, int>& p)
{
	p.showPerson();
}

//2.参数模板化
template<class T1, class T2>
void printPerson2(Person<T1,T2> &p)
{
	p.showPerson();
	cout << "T1的数据类型:" << typeid(T1).name() << endl;	//string
	cout << "T2的数据类型：" << typeid(T2).name() << endl;	//int
}

//3.整个类模板化
template<class T>
void printPerson3(T& p)
{
	p.showPerson();
	cout << "T的数据类型：" << typeid(T).name() << endl;	//Person
}

void test01()
{
	//实例化模板的对象
	Person<string, int>p("Tom", 100);

	//类模板的对象做函数的参数
	printPerson1(p);
}

void test02()
{
	Person<string, int>p("Rose", 50);
	
	printPerson2(p);
}

void test03()
{
	Person<string, int>p("wang", 40);
	
	printPerson3(p);
}

int main()
{
	test01();

	test02();

	test03();

	return 0;
}

总结：
1）通过类模板创建的对象，可以有三种方式向函数中进行传参。
2）使用的比较广泛的是第一种，指定传入类型。

=================================================================================================================================


十一、类模板与继承
当类模板碰到继承的时候需要注意以下几点
1）当子类继承到父类是一个类模板时，子类在声明时，需要指出父类中T的类型。
2）如果不指出，编译器无法给子类分配内存空间。
3）如果想灵活指定出父类中T的类型，那么子类也需要变成类模板。


#include <iostream>
using namespace std;
#include <typeinfo>

//类模板和继承
template<class T>
class Base {
public:

	T m;
};

/*
//1.当子类继承到父类是一个类模板时，子类在声明时，需要指出父类中T的类型
//class Son :public Base {		//err  没有指出父类中T的类型
class Son:public Base<int>{		//正确 因为已经确定出T的类型
public:
	//Son 不知道父类中继承下来的m是什么类型的，所以无法分配空间
};

void test01()
{
	//实例化子类对象
	Son s;
}
*/

//2.如果想灵活制定出父类中T的类型，子类也需要变成模板
template<class T1, class T2>
class Son :public Base<T2> //T1 -> int   T2 -> short
{
public:
	Son()
	{
		cout << "T1的数据类型:" << typeid(T1).name() << endl;
		cout << "T2的数据类型:" << typeid(T2).name() << endl;
	}

	T1 obj;
};

void test02()
{
	Son<int, short> s;

}

int main()
{
	//test01();

	test02();


	return 0;
}

=======================================================================================================================================

十二、类模板成员函数类外实现


1.将构造函数拷贝到类外
2.将类内的构造函数的实现过程删除然后在函数头的结尾添加一个分号


template<class T1, class T2>
class Person {
public:
	Person(T1 name, T2 age);

3.在类外的构造函数前添加作用域

Person::Person(T1 name, T2 age)

4.在类外的构造函数的上面添加类模板的声明

template<class T1, class T2>		->  添加类模板的声明
Person<T1, T2>::Person(T1 name, T2 age) -> 在作用域的地方添加虚拟的类型
{
	。。。。
}


====================================================================================================================================

十三、类模板的分文件编写。
掌握类模板成员函数分文件编写时产生的问题以及解决方法

问题：类模板成员函数创建时机是调用阶段，导致分文件编写的时候链接不到。

解决方式：
方式一：直接包含.cpp源文件。（在使用类模板之前，必须要让程序看到成员函数的实现过程）

1.创建Person.h头文件
2.将以下内容剪切到Person.h中

#ifndef _PERSON_H_
#define _PERSON_H_

template<class T1, class T2>
class Person {
public:

	Person(T1 name, T2 age);

	void showPerson();

	T1 m_Name;
	T2 m_Age;
};

#endif

3.再创建一个Person.cpp源文件
4.将以下的内容，剪切到Person.cpp中

template<class T1, class T2>
Person<T1, T2>::Person(T1 name, T2 age)
{
	this->m_Name = name;
	this->m_Age = age;
}

template<class T1, class T2>
void Person<T1, T2>::showPerson()
{
	cout << "name = " << this->m_Name << endl;
	cout << " age = " << this->m_Age << endl;
}

5.在Person.cpp中包含头文件

6.在test中包含#include "Person.h"

编译出错。
解决方法：
将test.cpp中的#include "Person.h"
修改为		   #include "Person.cpp"




方式二：将声明和实现写到同一个文件中，并更改后缀名为.hpp    .hpp是约定的名称，并不是强制的。

1.创建Person.hpp
2.将以下内容，剪切到hpp文件
#ifndef _PERSON_H_
#define _PERSON_H_

#include <iostream>
using namespace std;


template<class T1, class T2>
class Person {
public:

	Person(T1 name, T2 age);

	void showPerson();

	T1 m_Name;
	T2 m_Age;
};

template<class T1, class T2>
Person<T1, T2>::Person(T1 name, T2 age)
{
	this->m_Name = name;
	this->m_Age = age;
}

template<class T1, class T2>
void Person<T1, T2>::showPerson()
{
	cout << "name = " << this->m_Name << endl;
	cout << " age = " << this->m_Age << endl;
}

#endif

3.只需要在test.cpp中包含#include "Person.hpp" 

==================================================================================================================================

作业：

#include <iostream>
using namespace std;

template<class T>
int get_array_max(T a[], int n)
{
	T x = a[0]; //先认定第一个数字是最大的

	int i;
	for (i = 0; i < n; i++)
	{
		if (a[i] > x) //如果新的数字比我认定的数字要大
		{
			x = a[i];	//那么最大值就是这个新的数字
		}
	}
	return x;
}


int main()
{
	int inarray[10] = { 1,2,45,32,53,23,89,34,14,90 };
	int myIntmax = get_array_max(inarray, 10);


	float floatarray[10] = { 1.1, 3.2, 4.3, 5.4, 5.1, 6.2, 6.6, 8.9, 9.8, 3.9 };

	float myFloatmax = get_array_max(floatarray,10);

	return 0;
}

=============================================================================================================================


#include <iostream>
using namespace std;

template<class T>
class MyArray {
public:
	int get_sum()
	{
		T sum = 0;	//先定义一个总数赋值0
		int i;
		for (i = 0; i < 100; i++)	//将100个元素累加到sum变量中
		{
			sum += a[i];
		}
		return sum;	//将累计之后的总数返回
	}

	T& operator[](int index)
	{
		return a[index];
	}

private:
	T a[100];
};

int main()
{
	MyArray <int>m1;
	int i;
	for (i = 0; i <= 100; i++)
	{
		m1[i] = i;
	}

	int sum = m1.get_sum();
	cout << "sum = " << sum << endl;

	MyArray <float>m2;
	for (i = 0; i <= 100; i++)
	{
		m2[i] = i+0.1;
	}

	float sum1 = m2.get_sum();
	cout << "float sum = " << sum1 << endl;

	return 0;
}












