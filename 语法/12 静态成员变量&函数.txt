1. 静态成员变量

	1.1 静态成员变量 -> 在编译阶段就分配了内存
	1.2 类内声明，类外初始化
	1.3 静态成员变量：所有对象都共享一份数据
	1.4 访问方式有两种
		1.4.1 通过类名
			cout << Person::m_A << endl;
		1.4.2 通过对象
			cout << p1.m_A << endl;

2. 静态成员函数

	2.1 所有对象都共享同一份函数
	2.2  静态成员函数 也只可以访问 静态成员变量，不可以访问非静态成员变量
	2.3  静态成员函数 也是有访问权限的
	2.4  静态成员函数 有两种访问方式：通过对象，通过类名



-----------------------------------------------------------------------------------------------------------------------------

#include <iostream>
using namespace std;


class Person {
public:
	Person() {}
	//1.静态成员变量
	
	//静态成员变量 -> 在编译阶段就分配了内存
	//类内声明，类外初始化
	//静态成员变量：所有对象都共享一份数据
	static int m_A; 

	//2.静态成员函数

	//所有对象都共享一个func函数
	static void func(){

		//m_C = 100; //非静态成员变量不可以访问，因为无法区分到底要访问哪个对象
		cout << "func()的调用" << endl;

	}

	int m_C = 100;

private:
	static int m_B;

	static void func2(){}
};

int Person::m_A = 0;

void test01()
{
	//1.通过对象进行访问
	Person p1;
	cout << p1.m_A << endl;

	Person p2;
	p2.m_A = 100;
	cout << p2.m_A << endl;

	//2.通过类名进行访问
	cout << Person::m_A << endl;

	//3.静态成员变量也是有访问权限的,私有权限类外不可访问
	//cout << Person::m_B << endl;
}

void test02()
{
	//1.通过对象调用
	Person p1;
	p1.func();

	//2.通过类名进行调用
	Person::func();

	//3.静态成员函数也有访问权限
	//Person::func2();
}

int main()
{
	test01();
	test02();

	return 0;
}

















