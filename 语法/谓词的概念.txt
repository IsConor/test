谓词的概念
1.概念：
返回布尔类型的仿函数称为谓词。
如果operator()接受一个参数，那么就叫做一元谓词。
如果operator()接受两个参数，那么就叫做二元谓词。
------------------------------------------------------------------------------------------------------------------------------
1）一元谓词：

#include <iostream>
using namespace std;
#include <vector>

class GreaterFive {
public:
	bool operator()(int val)
	{
		return val > 5;
	}
};


int main()
{
	vector<int> v;
	int i;
	for (i = 0; i < 10; i++)
	{
		v.push_back(i);	//0-9
	}

	//查找以下容器中有没有大于5的数字
	//GreaterFive greaterfive;
	//vector<int>::iterator it = find_if(v.begin(), v.end(), greaterfive);	//方法1：函数对象   find_if();  按条件查找

	vector<int>::iterator it = find_if(v.begin(), v.end(), GreaterFive());	//方法2：匿名函数对象

	if (it == v.end())
	{
		cout << "未找到" << endl;
	}
	else {
		cout << "找到了大于5的数字:" << *it << endl;
	}

	return 0;
}

---------------------------------------------------------------------------------------------------------------------------------------------

2）二元谓词：

#include <iostream>
using namespace std;
#include <vector>
#include <algorithm>

class Mycompare {
public:
	bool operator()(int v1, int v2)
	{
		return v1 > v2;
	}
};

int main()
{
	vector<int> v;
	v.push_back(10);
	v.push_back(40);
	v.push_back(20);
	v.push_back(30);
	v.push_back(50);

	sort(v.begin(), v.end());	//默认是升序
	for (vector<int>::iterator it = v.begin(); it != v.end(); it++)
	{
		cout << *it << " ";
	}

	cout << endl;

	//使用函数对象来改变算法策略，使得排序从大到小
	Mycompare mycompare;
	sort(v.begin(), v.end(), mycompare);
	//sort(v.begin(), v.end(), Mycompare());

	for (vector<int>::iterator it = v.begin(); it != v.end(); it++)
	{
		cout << *it << " ";
	}

	cout << endl;

	return 0;
}

==============================================================================================

练习：自定义类，进行排序

#include <iostream>
using namespace std;
#include <vector>
#include <algorithm>

class Person {
public:
	Person(string name, int age)
	{
		this->m_Name = name;
		this->m_Age = age;
	}

	string m_Name;
	int m_Age;
};

class Mycompare{
public:
	bool operator()(Person &v1, Person &v2)
	{
		return v1.m_Age > v2.m_Age;
	}
};

int main()
{
	Person p1("Tom", 18);
	Person p2("Cat", 20);
	Person p3("Rose", 21);
	Person p4("Jack", 30);

	vector<Person> v;

	v.push_back(p1);
	v.push_back(p2);
	v.push_back(p3);
	v.push_back(p4);

	for (vector<Person>::iterator it = v.begin(); it != v.end(); it++)
	{
		cout << "name = " << it->m_Name << " ";
		cout << "age = " << it->m_Age << endl;
	}

	Mycompare mycompare;
	sort(v.begin(), v.end(), mycompare);
	cout << "排序后" << endl;

	for (vector<Person>::iterator it = v.begin(); it != v.end(); it++)
	{
		cout << "name = " << it->m_Name << " ";
		cout << "age = " << it->m_Age << endl;
	}

	return 0;
}

------------------------------
name = Tom age = 18
name = Cat age = 20
name = Rose age = 21
name = Jack age = 30
排序后
name = Jack age = 30
name = Rose age = 21
name = Cat age = 20
name = Tom age = 18

--------------------------------


