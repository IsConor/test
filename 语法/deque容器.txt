一、STL
1.STL诞生。
长久以来，软件界一直希望能够建立一种可重复利用的东西。
C++的面向对象和泛型编程思想，目的就是复用性的提升。
大多数情况下，数据结构和算法都未能有一套标准，导致被迫做大量重复工作
为了建立数据结构和算法的一套标准，诞生了STL

2.STL基本概念：
STL --->   标准模板库
STL分为： 容器（container）、算法（algorithm），迭代器（iterator）
容器与算法与之间通过迭代器进行无缝连接。
STL中几乎所有的代码都采用了函数模板和类模板。

3.STL容器、算法、迭代器
1）容器：用来存放数据。
STL的容器就是将运用最广泛的一些数据结构实现展现出来。
常见的数据结构：数组、链表、二叉树、栈、队列、集合。
这些容器分为序列式容器和关联式容器两种。

序列式容器：强调容器里面的排序，序列式容器中每一个元素均有固定的位置。
关联式容器：各个元素之间没有严格的物理上的顺序关系，

2）算法：用来解决问题
有限的步骤解决逻辑或者是数学上的问题
算法分为：质变算法和非质变算法

质变算法：是指运算的过程中更改区间内元素的内容。 例如：拷贝、替换、删除等。
非质变算法：指运算的过程中不会更改区间内的元素内容。例如：查找、计数、便利、寻找极值等。


3）迭代器：容器与算法之间的无缝连接。
提供一种方法，使之能够依序寻找容器中所包含的各个元素，而又无需暴露该容器内部的表示方式。
每一个容器都有自己专属的迭代器。
迭代器使用非常类似于指针

迭代器的种类：
种类						功能 											支持运算
输入迭代器			  	 对数据只读的访问		   	 						 只读、支持++、==、!= 
输出迭代器			  	 对数据只写的访问			   	 					只写、支持++
前向迭代器			  	读写操作，并能向前推进迭代器     	 					读写、支持++、==、!=
双向迭代器			    	读写操作，并能向前和向后操作	  						读写、支持++、--
随机访问迭代器		     读写操作，可以以跳跃的方式访问任意数据，功能最强的迭代器		读写、支持++、--、[n]、<、<= 、>、>=

总结：常见的容器中迭代器类型为双向迭代器和随机访问迭代器。

======================================================================================================================

二、容器算法迭代器初识

了解STL中容器、算法、迭代器的概念后，小案例感受容器、算法、迭代器式怎么用的
STL中常用的是vector，可以理解为数组，如何向容器中插入数据，并遍历这个容器

案例：vector容器存放内置数据类型。

容器：vector
算法：for_each
迭代器：vector<int>::iterator

#include <iostream>
using namespace std;
#include<vector>
#include<algorithm>

//vector容器存放内置数据类型

void myprint(int val)
{
	cout << val << endl;
}

int main()
{
	//1.通过vector容器里创建一个具体的vector对象
	vector <int>v;

	//2.往vector容器中插入数据
	v.push_back(10);
	v.push_back(20);
	v.push_back(30);
	v.push_back(40);
	v.push_back(50);

	//3.通过迭代器访问容器中的数据
	vector<int>::iterator itBegin = v.begin(); //起始迭代器
	vector<int>::iterator itEnd = v.end();		//结束迭代器

	//第一种方式
	/*while (itBegin != itEnd)
	{
		cout << *itBegin << endl;
		itBegin++;
	}*/

	//第二种方式
	/*for (vector<int>::iterator it = v.begin(); it != v.end(); it++)
	{
		cout << *it << endl;
	}*/

	//第三种方法
	for_each(v.begin(), v.end(), myprint);

	return 0;
}



练习：

#include <iostream>
using namespace std;

#include <vector>

class Person {
public:
	Person(string name, int age)
	{
		this->m_Name = name;
		this->m_Age = age;
	}

	string m_Name;
	int m_Age;
};

int main()
{
	vector<Person> v;
	Person p1("Tom", 18);
	Person p2("Cat", 19);
	Person p3("Rose", 20);

	v.push_back(p1);
	v.push_back(p2);
	v.push_back(p3);

	vector<Person>::iterator itBegin = v.begin();
	vector<Person>::iterator itEnd = v.end();

	for (vector<Person>::iterator it = v.begin(); it != v.end(); it++)
	{
		cout << (*it).m_Name;
		cout << (*it).m_Age << endl;
	}

	return 0;
}

==================================================================================================================

三、string容器。
1.string的基本概念。
本质
string是C++风格的字符串，而string本质上是一个类。

特点：
string类内部封装了很多成员方法。
例如： 查找find， 插入insert，删除erase。
string类通过char*来管理分配内存，不用担心赋值越界或者取值越界的问题。

2.string构造函数
string();				创建一个空的字符串， 例如string str;
string(const char* s);	使用字符串s初始化另外一个string对象
string(const string& str); 使用一个string对象初始化另外一个string对象
string(int n, char c);	使用n个字符c初始化

#include <iostream>
using namespace std;

int main()
{
	//通过string类实例化对象
	string s1;	//默认构造函数

	const char* str = "hello world";
	string s2(str);
	cout << s2 << endl;

	string s3(s2);
	cout << s3 << endl;

	string s4(10, 'a');
	cout << s4 << endl;


	return 0;
}

3.赋值操作。
string& operator=(const char*s);		//char*类型字符串赋值给当前的字符串
string& operator=(const string& s);	//把字符串s赋值给当前的字符串
string& operator=(char c);			//字符赋值给当前字符串
string& assign=(const char *s);	//把字符串s赋给当前的字符串
string& assign=(const char *s, int n); //把字符串s的前n个字符赋值给当前的字符串
string& assign=(const string &s);	//把字符串赋值给当前的字符串
string& assign=(int n, char c);		//用n个字符c赋值给当前字符串

#include <iostream>
using namespace std;



int main()
{
	string s1 = "hello";
	s1 += "world";
	cout << s1 << endl;

	string s2 = "i";
	s2.append("love play game");
	cout << "s2 = " << s2 << endl;

	string s3 = "abcdefgde";
	string s4 = "de";
	int pos = s3.find(s4);
	cout << "pos = " << pos << endl;

	pos = s3.rfind("de");
	cout << "pos = " << pos << endl;

	//find和rfind的区别：
	//find是从左到右寻找，rfind是从右到左寻找

	string s5 = "abcdefg";
	s5.replace(1, 3, "1111");
	cout << "s5 = " << s5 << endl;

	string s6 = "hello";
	string s7 = "hello";

	if (s6.compare(s7) == 0)
	{
		cout << "s6 = s7" << endl;
	}
	else {
		cout << "s6 != s7" << endl;
	}

	string s8 = "hello";
	cout << s8[0] << endl;
	cout << s8[1] << endl;
	cout << s8[2] << endl;
	cout << s8[3] << endl;
	cout << s8[4] << endl;

	string s9 = "hello";
	s9.insert(1,"111");
	cout << "s9 = " << s9 << endl;

	s9.erase(1,3);
	cout << "s9 = " << s9 << endl;

	string s10 = "abcdef";
	string substr = s10.substr(1,3);
	cout << substr << endl;

	string email = "baopengbo@outlook.com";
	pos = email.find("@");
	
	string usr_name = email.substr(0,pos);
	cout << usr_name << endl;

	string s11 = "hello";
	cout << s11.size() << endl;

	return 0;
}


========================================================================================================================================

四、vector容器。
1.vector容器基本概念。
1)功能：
vector的容器数据结构与数组非常相似，也成为单端数组。

2）vector容器与普通数组的区别？
普通数组  -> 静态空间。  int a[5];
vector容器  ->  动态扩展  

3）动态扩展。
并不是在原空间之后继续接新空间，而是找更大的内存空间，然后原数据拷贝到新空间中释放原空间

4）迭代器
vector容器的迭代器是随机访问迭代器

2.测试vector容器中所涉及到的函数接口
构造函数、 赋值操作 、 容量和大小、 插入与删除、 数据的存取、 互换容器、 预留空间

#include <iostream>
using namespace std;
#include <vector>

/*vector容器的函数接口*/

//构造函数、 赋值操作 、 容量和大小、 插入与删除、 数据的存取、 互换容器、 预留空间

void printVector(vector<int>& v)
{
	for (vector<int>::iterator it = v.begin(); it != v.end(); it++)
	{
		cout << *it << " ";
	}
	cout << endl;
}

 
int main()
{
	//vector<int> v1;

	//v1.push_back(10);
	//v1.push_back(20);
	//v1.push_back(30);

	//printVector(v1); //10 20 30

	//vector<int> v2(v1.begin(), v1.end());
	//printVector(v2); //10 20 30

	//vector<int>::iterator it = v1.begin();
	//it++;
	//vector<int> v2(it,v1.end());
	//printVector(v2); //20 30

	vector <int>v3(10,100);
	printVector(v3);

	vector<int> v4(v3);
	printVector(v4);

	vector<int> v5;
	v5 = v4;
	printVector(v5);

	vector<int> v6;
	v6.assign(v5.begin(),v5.end());
	printVector(v6);

	vector<int> v7;
	v7.assign(10,5);
	printVector(v7);

	if (v7.empty())
	{
		cout << "v7为空" << endl;
	}
	else {
		cout << "v7不为空" << endl;
		cout << "v7的容量" << v7.capacity() << endl;
		cout << "v7的大小" << v7.size() << endl;
	}

	v7.resize(15,7);
	printVector(v7);

	v7.insert(v7.begin(),10);
	printVector(v7);

	v7.erase(v7.begin());
	printVector(v7);
	/*
	v7.clear();
	printVector(v7);*/

	cout << v7.at(0) << endl;
	cout << v7.at(10) << endl;

	cout << v7[0] << endl;
	cout << v7[10] << endl;

	cout << v7.front() << endl;
	cout << v7.back() << endl;

	cout << "交换前" << endl;
	printVector(v3);
	printVector(v7);

	v7.swap(v3);

	cout << "交换后" << endl;
	printVector(v3);
	printVector(v7);

	cout << "---------------------------------" << endl;
	vector<int> v8;
	v8.reserve(100000);	//容器预留长度

	int i;
	int num = 0;
	int* p = NULL;
	for (i = 0; i < 100000; i++)
	{
		v8.push_back(i);

		//如果不相等，说明扩容了一次
		if (p != &v8[0])
		{
			p = &v8[0];
			num++;
		}
	}

	cout << "num = " << num << endl;

	return 0;
}

=================================================================================================
/*
输入一个字符串，把其中字符按照逆序输出，要求用string存储字符串
*/

#include <iostream>
using namespace std;

#include <vector>


int main()
{
	string str;
	cout << "please input string>" << endl;
	cin >> str; //ABCD

	int i = str.size();	//求出字符串的长度 i = 4
	while (i > 0)
	{
		cout << str.at(--i);
	}

	cout << endl;

	return 0;
}

--------------------------------------------

#include <iostream>
using namespace std;

#include <vector>

class Person {
public:
	Person(string name, int age)
	{
		this->m_Name = name;
		this->m_Age = age;
	}

	string m_Name;
	int m_Age;
};

int main()
{
	vector<Person *> v;
	Person p1("Tom", 10);
	Person p2("Cat", 20);
	Person p3("Rose", 21);

	v.push_back(&p1);
	v.push_back(&p2);
	v.push_back(&p3);

	for (vector<Person *>::iterator it = v.begin(); it != v.end(); it++)
	{
		cout << (*it)->m_Name << " ";
		cout << (*it)->m_Age << endl;
	}

	return 0;
}

--------------------------------------------------------------------------

#include <iostream>
using namespace std;
#include <vector>

//vector容器嵌套vector容器

int main()
{
	//1.创建4个小容器
	vector<int> v1;
	vector<int> v2;
	vector<int> v3;
	vector<int> v4;

	//2.向4个小容器中添加数据
	int i;
	for (i = 0; i < 4; i++)
	{
		v1.push_back(i+1);	//1234
		v2.push_back(i+2);	//2345
		v3.push_back(i+3);	//3456
		v4.push_back(i+4);	//4567
	}

	//3.创建大容器
	vector<vector<int>> v;
	v.push_back(v1);
	v.push_back(v2);
	v.push_back(v3);
	v.push_back(v4);

	//4.遍历大容器，依次得到每一个小容器
	for (vector<vector<int>>::iterator it = v.begin(); it != v.end(); it++)
	{
		for (vector<int>::iterator vit = (*it).begin(); vit != (*it).end(); vit++)
		{
			cout << *vit << " ";
		}
		cout << endl;
	}


	return 0;
}


================================================================================================================

























