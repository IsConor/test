赋值运算符重载
1.编译器会默认给一个类添加4个函数： 默认构造   析构   拷贝构造(值拷贝)  operator=(值拷贝)
2.如果类中有属性创建在堆区，利用编译器提供的=进行运算就会出现 堆区内存重复释放的问题
3.解决方案：利用深拷贝 重载 = 运算符      Person& operator=(const Person& p)   返回Person&是因为要支持链式编程思维 a = b = c; 所以要返回本体



-------------------------------------------------------------------------------------------------------------

#include <iostream>
using namespace std;

//编译器默认给一个类添加4个函数   默认构造  析构  拷贝构造  operator=(值拷贝)
class Person {
public:
	Person(const char* name, int age) {
		this->m_Name = new char[strlen(name) + 1];
		strcpy(this->m_Name, name);
		this->m_Age = age;
	}

	//等号运算符重载,做深拷贝
	Person& operator=(const Person& p) {
		if (this->m_Name != NULL) {
			delete[]this->m_Name;
			this->m_Name = NULL;
		}

		this->m_Name = new char[strlen(p.m_Name) + 1];
		strcpy(this->m_Name, p.m_Name);
		this->m_Age = p.m_Age;
		return *this;
	}

	//拷贝构造->没必要写判断是否为NULL
	Person(const Person& p) {
		this->m_Name = new char[strlen(p.m_Name) + 1];
		strcpy(this->m_Name, p.m_Name);
		this->m_Age = p.m_Age;
	}

	~Person() {
		if (this->m_Name != NULL) {
			delete []this->m_Name;
			this->m_Name = NULL;
		}
	}

	char* m_Name;
	int m_Age;

};

void test01() {
	Person p1("Tom", 10);
	p1.m_Age = 10;

	Person p2("Jerry", 19);
	p2 = p1; //释放堆区时报错，浅拷贝问题， 所以要重载等号

	Person p3("Cat", 20);
	p3 = p2 = p1; //支持连等，所以重载要返回本体,返回void类型不可以支持连等操作

	Person p4 = p3;
	cout << "姓名: " << p2.m_Name << " 年龄: " << p2.m_Age << endl;
	cout << "姓名: " << p1.m_Name << " 年龄: " << p1.m_Age << endl;
	cout << "姓名: " << p3.m_Name << " 年龄: " << p3.m_Age << endl;
}



int main()
{
	test01();
	int a = 10;
	int b = 20;
	int c;
	c = a = b;
	cout << "a = " << a << " b = " << b << " c = " << c << endl; //20 20 20

	return 0;
}