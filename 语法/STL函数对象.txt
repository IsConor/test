STL函数对象的概念

1.概念。
重载函数调用操作符的类，其对象称为函数对象。
函数对象使用重载()时，行为类似函数的调用，也叫仿函数。

2.本质。
函数对象(仿函数)是一个类的对象，不是一个函数。

例如：
class Person{
public:
	void operator()()
	{

	}
}

Person p;  //p就是函数对象
p(); 		//对象使用()时，非常像函数的调用 --> 仿函数

二、函数对象的使用
1.函数对象在使用时，可以像函数对象那样调用，可以有参数，可以有返回值。
2.函数对象超过普通函数的概念，函数对象可以有自己的状态。
3.函数对象可以作为参数传递

#include <iostream>
using namespace std;

//1.函数对象在使用时，可以像函数对象那样调用，可以有参数，可以有返回值。
class MyAdd {
public:
	//类中重载了(),那么这个类的对象就是函数对象
	int operator()(int v1, int v2)
	{
		return v1 + v2;
	}
};

void test01()
{
	MyAdd myadd; //myadd就是一个函数对象
	int ret = myadd(10, 20);
	cout << "ret = " << ret << endl;

}

//2.函数对象超过普通函数的概念，函数对象可以有自己的状态。
class Myprint {
public:
	Myprint()
	{
		this->count = 0;
	}

	void operator()(string text)
	{
		cout << text << endl;
		this->count++;
	}

	int count;
};

void test02()
{
	Myprint myprint;
	myprint("hello world");
	myprint("hello world");
	myprint("hello world");

	cout << "myprint调用的次数:" << myprint.count << endl;
}

//3.函数对象可以作为参数传递
void doPrint(Myprint &myprint, string text)
{
	myprint(text);
}

void test03()
{
	Myprint myprint;
	doPrint(myprint,"hello C++");
}

int main()
{
	//test01();
	//test02();
	test03();

	return 0;
}




























