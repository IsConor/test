深拷贝和浅拷贝的问题以及解决

1.如果有属性开辟到堆区，利用编译器提供的拷贝构造函数会导致浅拷贝带来的析构重复释放堆区内存的问题
2.利用深拷贝解决浅拷贝的问题
3.自己提供拷贝构造函数，实现深拷贝


#include <iostream>
using namespace std;
#include <string.h>

class Person {
public:
	Person(const char *name, int age)
	{
		m_Name = (char *)malloc(strlen(name) + 1);

		strcpy(m_Name, name);
		m_Age = age;
	}

	Person(const Person& p)
	{
		m_Name = (char*)malloc(strlen(p.m_Name) + 1);
		strcpy(m_Name, p.m_Name);
		m_Age = p.m_Age;
	}

	~Person()
	{
		if (m_Name != NULL)
		{
			free(m_Name);
			m_Name = NULL;
		}
	}

	char* m_Name;  //姓名
	int m_Age;	   //年龄
};

void test01()
{
	Person p("tom", 18);
	Person p2(p);

	cout << "name = " << p.m_Name << " age = " << p.m_Age << endl;
	cout << "name = " << p2.m_Name << " age = " << p2.m_Age << endl;
}

int main()
{
	test01();


	return 0;
}