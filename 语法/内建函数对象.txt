内建函数对象
1）意义：
STL中已经内建了一些函数对象

2）分类。
算数仿函数
关系仿函数
逻辑仿函数

3）用法
这些仿函数所产生的对象，用法与一般函数完全相同。
使用内建函数对象，需要引入头文件： #include <functional>

二、算数仿函数。
template<class T> T plus<T>	//加法仿函数
template<class T> T minus<T>	//减法仿函数
template<class T> T multiplies<T> //乘法仿函数
template<class T> T divides<T> //除法仿函数
template<class T> T modulus<T> //取模仿函数
template<class T> T negate<T>  //取反仿函数


#include <iostream>
using namespace std;
#include <functional>


int main()
{
	plus<int> p;
	cout << p(10, 20) << endl;	//30

	negate<int> n; //n就是一个函数对象
	cout << n(50) << endl;		//-50


	return 0;
}


三、关系仿函数
template<class T> bool equal_to<T>		//等于
template<class T> bool not_equal_to<T>	//不等于
template<class T> bool greater<T>		//大于
template<class T> bool greater_equal<T>	//大于等于
template<class T> bool less<T>		//小于
template<class T> bool less_equal<T>	//小于等于



#include <iostream>
using namespace std;
#include <functional>
#include <vector>
#include <algorithm>

class Mycompare {
public:
	bool operator()(int v1, int v2)
	{
		return v1 > v2;
	}
};


int main()
{
	vector<int> v;

	v.push_back(10);
	v.push_back(50);
	v.push_back(30);
	v.push_back(40);
	v.push_back(20);

	cout << "排序前" << endl;
	for (vector<int>::iterator it = v.begin(); it != v.end(); it++)	//遍历
	{
		cout << *it << endl;
	} 

	cout << "排序后" << endl;

	//sort(v.begin(), v.end());	//升序
	//sort(v.begin(), v.end(), Mycompare()); //降序,自己写规则
	sort(v.begin(), v.end(), greater<int>()); //使用内建的降序函数对象

	for (vector<int>::iterator it = v.begin(); it != v.end(); it++)
	{
		cout << *it << endl;
	}

	

	return 0;
}


四、逻辑仿函数
template<class T> bool logical_and<T>	//逻辑与
template<class T> bool logical_or<T>	//逻辑或
template<class T> bool logical_not<T>	//逻辑非


#include <iostream>
using namespace std;
#include <functional>
#include <algorithm>
#include <vector>

//逻辑仿函数


int main()
{
	vector<bool> v;

	v.push_back(true);	//1
	v.push_back(false); //0
	v.push_back(true);	//1
	v.push_back(false);	//0

	cout << "搬运之前" << endl;
	for (vector<bool>::iterator it = v.begin(); it != v.end(); it++)
	{
		cout << *it << " ";	//1 0 1 0
	}
	cout << endl;

	vector<bool> v2;
	v2.resize(v.size()); //给v2重新指定大小

	transform(v.begin(), v.end(), v2.begin(), logical_not<bool>());

	for (vector<bool>::iterator it = v2.begin(); it != v2.end(); it++)
	{
		cout << *it << " ";
	}
	cout << endl;


	return 0;
}







