一、deque容器
1.功能：
deque容器底层实现其实就是一个双端数组，可以对头部进行插入和删除操作。

2.deque容器迭代器
支持随机访问迭代器 

#include <iostream>
using namespace std;
#include <deque>
#include <algorithm>

void printDeque(deque <int>&d)
{
	for (deque<int>::iterator it = d.begin(); it != d.end(); it++)
	{
		cout << *it << " ";
	}
	cout << endl;
}

int main()
{
	deque <int>d1;	//构造函数

	d1.push_back(10);
	d1.push_back(20);
	d1.push_back(30);
	d1.push_back(40);

	printDeque(d1);

	deque <int>d2(d1.begin(), d1.end());	//将旧容器头尾赋值给新的容器
	printDeque(d2);

	deque <int>d3(10, 100);		//赋值10个100
	printDeque(d3);

	deque <int>d4(d3);		//拷贝构造
	printDeque(d4);

	deque <int>d5;		// = 号赋值
	d5 = d4;
	printDeque(d5);

	deque <int>d6;			
	d6.assign(d5.begin(), d5.end());	//区间赋值
	printDeque(d6);

	deque <int>d7;
	d7.assign(10, 9);	//assign赋值10个9
	printDeque(d7);		

	if (d7.empty())		//判断是否为空
	{
		cout << "d7为空" << endl;
	}
	else {
		cout << "d7不为空" << endl;
		cout << "d7的大小：" << d7.size() << endl;	//size() 计算大小 
		//cout << "d7的容量：" << d7.capacity() << endl;  //deque容器没有容量获取
	}

	//d7.resize(15); //resize重新设定大小，多出来的默认用0填充
	//printDeque(d7);

	//d6.resize(15, 6); //resize重新设定大小，多出来的设定为6来补充
	//printDeque(d6);

	//d5.resize(5);	//resize重新设定大小，小于原来大小就删除少的部分
	//printDeque(d5);

	printDeque(d7);
	d7.push_back(100); //尾插
	d7.push_front(3);	//头插
	printDeque(d7);

	d7.pop_back();	//尾删
	printDeque(d7);

	d7.pop_front();	//头删
	printDeque(d7);

	deque<int>::iterator it = d7.begin(); //右移两位后插入1000
	it++;
	it++;
	d7.insert(it, 1000);
	printDeque(d7);

	//d7.erase(d7.begin(), d7.end()); //区间清空
	//printDeque(d7);

	//d7.clear();		//清空

	cout << d7.at(0) << endl;  //下标输出， = d7[0]

	cout << d7.front() << endl; //返回第一个元素
	cout << d7.back() << endl;	//返回最后一个元素

	cout << "----------------------------------------" << endl;

	deque <int>d8;
	d8.push_back(10);
	d8.push_back(20);
	d8.push_back(30);

	d8.push_front(100);
	d8.push_front(200);
	d8.push_front(300);

	cout << "==========  排序前  ============" << endl;
	printDeque(d8);

	//sort默认的排序方式是从小到大   升序
	//对于支持随机访问的迭代器的容器，都可以利用sort算法来进行排序
	//vector容器也支持sort算法，算法要包含 #include <algorithm>头文件

	sort(d8.begin(), d8.end());		

	cout << "==========  排序后  ============" << endl;
	printDeque(d8);

	return 0;
}


=================================================================================================================================


项目：5名选手打分，10个评委，去掉最高分和最低分，取平均值，打印出无名选手的姓名和最终得分
我做的：

#include <iostream>
using namespace std;
#include <vector>
#include <deque>
#include <algorithm>

//创建deque容器存放得分
deque <int>d;

class Person {
public:
	Person(string name)
	{
		this->m_Name = name;
	}

	Person(string name, int num)
	{
		this->m_Name = name;
		this->m_Num = num;
	}

	string m_Name;
	int m_Num;
};

void printVector(vector<Person>& v)
{
	for (vector<Person>::iterator it = v.begin(); it != v.end(); it++)
	{
		cout << (*it).m_Name << " ";
		cout << (*it).m_Num << endl;
	}
}

void printDeque(deque<int> &d)
{
	for (deque<int>::iterator it = d.begin(); it != d.end(); it++)
	{
		cout << (*it) << " ";
	}
	cout << endl;
}

//分数
int myfunc()
{
	//生成10个随机数
	int i;
	for (i = 0; i < 10; i++)
	{
		int a = rand() % 40 + 60;
		d.push_back(a);
	}

	//排序
	sort(d.begin(), d.end());

	//去除最高分和最低分
	d.pop_front();
	d.pop_back();

	//取平均值 
	int sum = 0;
	for (i = 0; i < d.size(); i++)
	{
		sum += d.at(i);
	}

	int num = sum / d.size();
	return num;
}

int main()
{
	srand(time(NULL));
	//五名选手
	Person p1("A",myfunc());
	Person p2("B",myfunc());
	Person p3("C",myfunc());
	Person p4("D",myfunc());
	Person p5("E",myfunc());

	//创建一个vector容器，存放5名选手
	vector <Person>v;

	v.push_back(p1);
	v.push_back(p2);
	v.push_back(p3);
	v.push_back(p4);
	v.push_back(p5);

	printVector(v);


	//printDeque(d);


	return 0;
}

----------------------------------------------------------------------------
老师做的

#include <iostream>
using namespace std;
#include <vector>
#include <deque>
#include <algorithm>



class Person {
public:
	Person(string name, int score)
	{
		this->m_Name = name;
		this->m_Score = score;
	}

	string m_Name;	//姓名
	int m_Score;	//平均分
};

void createPerson(vector <Person> &v)
{
	string nameSeed = "ABCDE";

	string name;
	int score;	//分数
	for (int i = 0; i < 5; i++)
	{
		name = "选手";
		name += nameSeed[i];

		score = 0; //一开始可以设置为0

		//创建选手
		Person p(name, score);
		v.push_back(p);
	}
}

void printVector(vector<Person>& v)
{
	for (vector<Person>::iterator it = v.begin(); it != v.end(); it++)
	{
		cout << (*it).m_Name << " ";
		cout << (*it).m_Score << endl;
	}
}

void setScore(vector<Person>& v)
{
	int i;
	int score;
	int sum;
	int avg;
	for (vector<Person>::iterator it = v.begin(); it != v.end(); it++)
	{
		deque <int>d;
		for (i = 0; i < 10; i++)
		{
			score = rand() % 41 + 60;
			d.push_back(score);
		}
		sort(d.begin(), d.end());

		d.pop_back();
		d.pop_front();

		sum = 0;
		for (deque<int>::iterator dit = d.begin(); dit != d.end(); dit++)
		{
			sum += *dit;
		}

		avg = sum / d.size();

		it->m_Score = avg;
	}
}

int main()
{
	srand(time(NULL));

	//1.创建一个vector容器，然后存放5名选手
	vector <Person>v;
	createPerson(v);



	setScore(v);
	
	printVector(v);

	return 0;
}


===========================================================================================================================

























