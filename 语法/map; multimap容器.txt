map / multimap容器基本概念
1.简介
map中所有的元素都是pair
pair中的第一个元素为key(键值)，起到了索引的作用。第二个元素为value(实值)。
所有的元素会根据元素的键值来自动排序。

2.本质
底层结构是二叉树。

3.优点：
快速根据key值找到value。

4.map与multimap容器区别是什么？
map容器不允许容器中有重复的key值元素。
multimap容器允许容器中有重复的key值元素。

#include <iostream>
using namespace std;
#include <map>

void printMap(map<int, int> &m)
{
	for (map<int, int>::iterator it = m.begin(); it != m.end(); it++)
	{
		cout << "key = " << (*it).first << " ";
		cout << "value = " << it->second << endl;
	}
}

int main()
{
	//1.创建一个map容器
	map<int, int> m;

	//2.创建一些队组
	pair<int, int> p1(1, 10);	//打乱也会根据key值自动排序（升序）
	pair<int, int> p2(2, 20);
	pair<int, int> p3(3, 30);
	pair<int, int> p4(4, 40);
	pair<int, int> p5(5, 50);

	//3.将一些对组插入到容器
	m.insert(p1);
	m.insert(p2);
	m.insert(p3);
	m.insert(p4);
	m.insert(p5);

	printMap(m);


	map <int, int>m2(m);	//拷贝构造
	cout << "----------------------" << endl;
	printMap(m2);

	cout << "----------------------" << endl;
	map<int, int> m3;		//operator =();   等号重载
	m3 = m2;
	printMap(m3);

	if (m3.empty())		//empty()  判断是否为空
	{
		cout << "m3为空" << endl;
	}
	else {
		cout << "m3不为空" << endl;
		cout << "m3的大小：" << m3.size() << endl;   // size() 判断容器大小
	}

	map<int, int> m4;
	pair<int, int> p11(11,110);
	pair<int, int> p22(55,550);
	pair<int, int> p33(22,220);
	pair<int, int> p44(44,440);
	pair<int, int> p55(33,330);

	m4.insert(p11);
	m4.insert(p22);
	m4.insert(p33);
	m4.insert(p44);
	m4.insert(p55);

	cout << "--------- 交换前 -----------" << endl;
	printMap(m4);
	cout << "-----------------------" << endl;
	printMap(m);

	cout << "------- 交换后 ------------" << endl;
	m4.swap(m);		//swap();  交换
	printMap(m4);
	cout << "----------------------" << endl;
	printMap(m);

	//m4.clear();		//clear();  清空
	//printMap(m4);

	//m.erase(m.begin(), m.end());	//区间删除
	//printMap(m);

	map<int, int>::iterator pos = m4.find(1);	//find();  寻找元素
	if (pos != m4.end())
	{
		cout << "找到了:" << (*pos).second << " " << pos->first << endl;
	}
	else {
		cout << "未找到" << endl;
	}

	cout << "key的元素个数:" << m4.count(2) << endl;	//count(value);  统计元素个数

	return 0;
}


二、map容器的排序

#include <iostream>
using namespace std;
#include <map>

class Mycompare {
public:
	bool operator()(int v1, int v2) const
	{
		return v1 > v2;
	}
};


void printMap(map<int, int, Mycompare>& m)
{
	for (map<int, int>::iterator it = m.begin(); it != m.end(); it++)
	{
		cout << "key = " << (*it).first << " ";
		cout << "value = " << it->second << endl;
	}
}

int main()
{
	//1.创建一个map容器
	map<int, int, Mycompare> m;

	//2.创建一些队组
	pair<int, int> p1(1, 10);	//打乱也会根据key值自动排序（升序）
	pair<int, int> p2(2, 20);
	pair<int, int> p3(3, 30);
	pair<int, int> p4(4, 40);
	pair<int, int> p5(5, 50);

	//3.将一些对组插入到容器
	m.insert(p1);
	m.insert(p2);
	m.insert(p3);
	m.insert(p4);
	m.insert(p5);

	printMap(m);
}

























