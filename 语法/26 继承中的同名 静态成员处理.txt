继承中的同名 静态成员处理

1.结论和上一个是一样的
2.调用的方式有两种
	2.1 通过对象
	2.2 通过类名
--------------------------------------------------------------------------------------------------------------------

#include <iostream>
using namespace std;

//基类
class Base {
public:
	static void func() {
		cout << "Base中的func调用" << endl;
	}

	static int m_A; //静态成员变量的类内声明
};

int Base::m_A = 10;	//静态成员变量的类外初始化

//派生类
class Son :public Base {
public:
	static void func() {	//静态成员函数
		cout << "Son中的func调用" << endl;
	}

	static int m_A;	//类内声明
};

int Son::m_A = 20;	//类外初始化


void test01() {
	//1.通过对象访问
	Son s;
	cout << "m_A = " << s.m_A << endl;
	cout << "Base中的m_A = " << s.Base::m_A << endl;

	//2.通过类名访问
	cout << "m_A = " << Son::m_A << endl;
	//通过类名的方式访问基类作用域下静态成员变量
	cout << "Base中的m_A = " << Son::Base::m_A << endl;
}

void test02() {
	//1.通过对象
	Son s;
	s.func();
	Base b;
	b.func();

	//2.通过类名访问
	Son::func();
	Base::func();

	Son::Base::func();
}


int main()
{
	test01();
	test02();

	return 0;
}