一、常见遍历算法
for_each	//遍历容器
transform	//搬运容器到另一个容器中

1.for_each(iterator beg, iterator end, _func);
 //遍历算法，遍历容器元素
 //beg 开始迭代器
 //end 结束迭代器
 //_func 函数或者函数对象

2.transform(iterator beg1, iterator end1, iterator beg2, _func);
 //beg1 源容器开始迭代器
 //end1 源容器结束迭代器
 //beg2 目标容器开始迭代器
 //_func 函数或者函数对象

---------------------------------------------- 遍历算法实例 ---------------------------------------------------------

#include <iostream>
using namespace std;
#include <algorithm>
#include <vector>

//for_each(iterator beg, iterator end, _func);	//遍历容器
//transform(iterator beg1, iterator end1, iterator beg2, _func);	//搬运容器到另一个容器中

class Print01 {
public:
	void operator()(int val)
	{
		cout << val << " ";
	}
};

void Print02(int val)
{
	cout << val << " ";
}

class Test {
public:
	int operator()(int v)
	{
		return v;
	}
};

int main()
{
	vector<int> v;
	int i;
	for (i = 0; i < 10; i++)
	{
		v.push_back(i);
	}

	//第一种方式：使用有名函数对象
	// Print01 p1;
	// for_each(v.begin(), v.end(), p1);
 
	// 第二种方式：使用匿名函数对象
	//for_each(v.begin(), v.end(), Print01());

	//第三种方式：使用函数
	//for_each(v.begin(), v.end(), Print02);

	cout << endl;
	
	cout << "--------------------------------" << endl;

	vector<int> vTarget; //目标容器
	vTarget.resize(v.size()); //给目标容器容量

	transform(v.begin(), v.end(), vTarget.begin(), Test()); //将v1搬运到目标容器
	for_each(vTarget.begin(), vTarget.end(), Print02);
	cout << endl;

	return 0;
}
-----------------------------------------------------------------------------------------------------------------

二、常见查找算法

find			//查找元素
find_if		//按条件查找元素
adjacent_find	//查找相邻重复元素
binary_search	//二分查找法
count			//统计元素个数
count_if		//按条件统计元素个数

1.find(iterator beg, iterator end, value);
//按值查找元素，找到返回指定位置迭代器，找不到返回结束迭代器位置
//beg 开始迭代器
//end 结束迭代器
//value 查找的元素

2.find_if(iterator beg, iterator end, _Pred);
//按条件查找元素，找到返回指定位置迭代器，找不到返回结束迭代器位置
 //beg 开始迭代器
 //end 结束迭代器
 //_Pred 函数或者谓词（返回bool类型的仿函数）

3.adjacent_find(iterator beg, iterator end);
//查找相邻重复元素，返回相邻元素的第一个位置的迭代器
 //beg 开始迭代器
 //end 结束迭代器


4.bool binary_search(iterator beg, iterator end, value);
//查找指定元素，查到返回true 否则false
 //注意：在无序序列中不可用
 //beg 开始迭代器
 //end 结束迭代器
 //value 查找的元素

5.count（iterator beg, iterator end, value);
//统计元素出现的次数
//beg 开始迭代器
//end 结束迭代器
//value 统计的元素


6.count_if(iterator beg, iterator end, _Pred);
//按条件统计元素出现次数
 //beg 开始迭代器
 //end 结束迭代器
 //_Pred 函数或者谓词(返回bool类型的仿函数)



------------------------------------------------- find / find_if ------------------------------------------------------------------------------

#include <iostream>
using namespace std;
#include <algorithm>
#include <vector>

class Person {
public:
	Person(string name, int age)
	{
		this->m_Name = name;
		this->m_Age = age;
	}

	bool operator==(const Person &p) //运算符重载"=="
	{
		if (this->m_Name == p.m_Name && this->m_Age == p.m_Age)
		{
			return true;
		}
		else {
			return false;
		}
	}

	string m_Name;
	int m_Age;
};

class Greater20 {
public:
	bool operator()(Person &p)
	{
		return p.m_Age > 20;
	}
};

int main()
{
	//
	//vector<int> v;
	//int i;
	//for (i = 0; i < 10; i++)
	//{
	//	v.push_back(i);
	//}

	////查找容器中有没有5这个元素
	//vector<int>::iterator it = find(v.begin(),v.end(),5);
	//if (it == v.end())
	//{
	//	cout << "not find" << endl;
	//}
	//else {
	//	cout << "find " << *it << endl;
	//}

	vector<Person> v;

	Person p1("aaa", 18);
	Person p2("bbb", 20);
	Person p3("ccc", 21);
	Person p4("ddd", 24);
	Person p5("eee", 28);

	v.push_back(p1);
	v.push_back(p2);
	v.push_back(p3);
	v.push_back(p4);
	v.push_back(p5);

	//vector<Person>::iterator it = find(v.begin(), v.end(), p2); //find
	//if (it == v.end())
	//{
	//	cout << "not find" << endl;
	//}
	//else {
	//	cout << "find " << it->m_Name << " " << it->m_Age << endl;
	//}

	vector<Person>::iterator it = find_if(v.begin(), v.end(), Greater20());
	if (it == v.end())
	{
		cout << "not find" << endl;
	}
	else {
		cout << "name: " << it->m_Name << " age = " << it->m_Age << endl;
	}


	return 0;
}

-------------------------------------------------- adjacent_find() ---------------------------------------------------------------------

#include <iostream>
using namespace std;
#include <algorithm>
#include <vector>

int main()
{
	vector<int> v;

	v.push_back(2);
	v.push_back(0);
	v.push_back(5);
	v.push_back(5);
	v.push_back(7);

	//adjacent_find  返回相邻元素的第一个的位置
	vector<int>::iterator it = adjacent_find(v.begin(), v.end()); 
	if (it == v.end())
	{
		cout << "not find" << endl;
	}
	else {
		cout << "find " << *it << endl;
	}

	return 0;
}

-------------------------------------------------- binary_search() ---------------------------------------------------------------------

#include <iostream>
using namespace std;
#include <algorithm>
#include <vector>

int main()
{
	vector<int> v;
	int i;
	for (i = 0; i < 10; i++)
	{
		v.push_back(i);
	}

	//v.push_back(2); 在无序序列中不可使用

	bool ret = binary_search(v.begin(), v.end(), 9);
	if (ret)
	{
		cout << "find" << endl;
	}
	else {
		cout << "not find" << endl;
	}


	return 0;
}

------------------------------------------------ count / count_if  ---------------------------------------------------------------

#include <iostream>
using namespace std;
#include <algorithm>
#include <vector>

class Mycompare {
public:
	bool operator()(int val)
	{
		return val > 20;
	}
};

int main()
{
	vector<int> v;

	v.push_back(10);
	v.push_back(30);
	v.push_back(20);
	v.push_back(50);
	v.push_back(40);
	v.push_back(30);

	//统计30出现的次数
	int num = count(v.begin(), v.end(), 30);
	cout << "num = " << num << endl;

	//统计大于20的元素有多少个
	num = count_if(v.begin(), v.end(), Mycompare());
	cout << " num = " << num << endl;


	return 0;
}



三、常见排序算法

sort			//对容器内元素进行排序
random_shuffle	//洗牌，指定范围内的元素随机调整次序
merge			//容量元素合并，并存储到另一个容器中
reverse		//反转指定范围的元素

1.sort(iterator beg, iterator end, _Pred);
//按值查找元素，找到返回指定位置迭代器，找不到返回结束迭代器位置
 //beg 开始迭代器
 //end 结束迭代器
 //_Pred 谓词

2.random_shuffle(iterator beg, iterator end);
//指定范围内的元素随机调整次序
 //beg 开始迭代器
 //end 结束迭代器

3.merge(iterator beg1, iterator end1, iterator beg2, iterator end2, iterator dest);
//容器元素合并，并存储到另一个容器中
//注意：两个容器必须是有序的
 //beg1 容器1 开始迭代器
 //end1 容器1结束迭代器
 //beg2 容器2 开始迭代器
 //end2 容器2 结束迭代器
 //dest 目标容器开始迭代器

4.reverse(iterator beg, iterator end);
//反转指定范围的元素
 //beg 开始迭代器
 //end 结束迭代器


-----------------------------------------------------  random_shuffle()  洗牌------------------------------------------------------------------
#include <iostream>
using namespace std;
#include <algorithm>
#include <vector>

class Mycompare {
public:
	void operator()(int val)
	{
		cout << val << " ";
	}
};

int main()
{
	vector<int> v;
	int i;
	for (i = 0; i < 5; i++)
	{
		v.push_back(i);
	}

	cout << "xipaiqian" << endl;
	for_each(v.begin(), v.end(), Mycompare());
	cout << endl;

	random_shuffle(v.begin(), v.end()); //内部实现利用rand()实现
	
	cout << "xipaihou" << endl;
	for_each(v.begin(), v.end(), Mycompare());
	cout << endl;


	return 0;
}

------------------------------------------------merge() 合并 / reverse() 遍历----------------------------------------------------------------
#include <iostream>
using namespace std;
#include <algorithm>
#include <vector>

class Myprint {
public:
	void operator()(int val)
	{
		cout << val << " ";
	}
};


int main()
{
	vector<int> v1;
	vector<int> v2;

	int i;
	for (i = 0; i < 10; i++)
	{
		v1.push_back(i); //0 - 9
		v2.push_back(i+1); //1-10
	}

	vector<int> vTarget; //新建一个容器

	vTarget.resize(v1.size()+v2.size()); //新容器的容量等于v1 + v2

	merge(v1.begin(), v1.end(), v2.begin(), v2.end(), vTarget.begin()); //将v1 和 v2合并到新容器
	for_each(vTarget.begin(), vTarget.end(), Myprint()); //遍历
	cout << endl;

	reverse(v1.begin(), v1.end());	//反转
	for_each(vTarget.begin(), vTarget.end(), Myprint()); //遍历
	cout << endl;


	return 0;
}

--------------------------------------------------------------------------------------------------------------------------------------

四、常见拷贝和替换算法

copy			//容器内指定范围的元素拷贝到另一个容器中
replace		//将容器内指定范围的旧元素修改为新元素
replace_if		//容器内指定范围满足条件的元素替换为新元素
swap			//互换两个容器的元素

1.copy(iterator beg, iterator end, iterator dest);
 //beg 开始迭代器
 //end 结束迭代器
 //dest 目标起始迭代器

2.replace(iterator beg, iterator end, oldvalue, newvalue);
//将旧区间内旧元素替换成新元素
 //beg 开始迭代器
 //end 结束迭代器
 //oldvalue 旧元素
 //newvalue 新元素

3.replace_if(iterator beg, iterator end, _Pred, newvalue);
//按条件替换元素，满足条件的替换成指定元素
 //beg 开始迭代器
 //end 结束迭代器
 //_Pred 谓词
 //newvalue 替换的新元素

4.swap(container c1, container c2);
//互换两个容器的元素
 //c1 容器1
 //c2 容器2

-------------------------------------------------------------------------------------------------------------------------------------

#include <iostream>
using namespace std;
#include <algorithm>
#include <vector>

class Mycompare {
public:
	void operator()(int val)
	{
		cout << val << " ";
	}
};

class Greater30 {
public:
	bool operator()(int val)
	{
		return val >= 30;
	}
};

int main()
{
	vector<int> v1;
	v1.push_back(10);
	v1.push_back(50);
	v1.push_back(30);
	v1.push_back(60);
	v1.push_back(30);
	v1.push_back(40);
	v1.push_back(10);

	vector<int> v2;
	v2.resize(v1.size());

	copy(v1.begin(), v1.end(), v2.begin()); //将v1容器拷贝到v2容器
	for_each(v2.begin(), v2.end(), Mycompare());
	cout << endl;

	cout << "change before" << endl;
	for_each(v1.begin(), v1.end(), Mycompare());
	cout << endl;

	//replace(v1.begin(), v1.end(), 30, 70); //将容器中的30换成70
	replace_if(v1.begin(), v1.end(), Greater30(),100); //将大于等于30的数换成100

	cout << "change after" << endl;
	for_each(v1.begin(), v1.end(), Mycompare());
	cout << endl;

	cout << "change v1 v2 before" << endl;
	for_each(v1.begin(), v1.end(), Mycompare());
	cout << endl;
	for_each(v2.begin(), v2.end(), Mycompare());
	cout << endl;

	swap(v1, v2);	//互换两个容器

	cout << "change v1 v2 after" << endl;
	for_each(v1.begin(), v1.end(), Mycompare());
	cout << endl;
	for_each(v2.begin(), v2.end(), Mycompare());
	cout << endl;

	return 0;
}


-----------------------------------------------------------------------------------------------------------------------------------------

五、常见算术生成算法
需要包含头文件
#include <numeric>

accumulate  //计算容器元素累计总和
fill		//向容器中添加元素

1.accumulate(iterator beg, iterator end, value);
//计算容器元素累计总和
 //beg 开始迭代器
 //end 结束迭代器
 //value 起始值

2.fill(iterator beg, iterator end, value);
//向容器中填充元素
 //beg 开始迭代器
 //end 结束迭代器
 //value 填充的值
------------------------------------------------------------------------------------------------------------------------------------

#include <iostream>
using namespace std;
#include <algorithm>
#include <vector>
#include <functional>
#include <numeric>

class Mycompare {
public:
	void operator()(int val)
	{
		cout << val << " ";
	}
};

int main()
{
	//vector<int> v;
	//int i;
	//for (i = 0; i < 10; i++)
	//{
	//	v.push_back(i);
	//}

	//int sum = accumulate(v.begin(), v.end(), 0); //计算总和
	//cout << sum << endl;

	vector<int> v;
	v.resize(10);

	fill(v.begin(), v.end(), 100);
	for_each(v.begin(), v.end(), Mycompare());

	return 0;
}
 
--------------------------------------------------------------------------------------------------------------------------------

六、常见集合算法

set_intersection //求两个容器的交集
set_union		//求两个容器的并集
set_difference	//求两个容器的差集

1.set_intersection(iterator beg1, iterator beg2, iterator end2, iterator dest);
//求两个集合的交集











