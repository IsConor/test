纯虚函数和抽象类

1.纯虚函数语法：virtual int getResult() = 0; 
2.如果一个类中包含纯虚函数，那么这个类就无法实例化对象
3.抽象类的子类必须要重写基类中的纯虚函数，否则也属于抽象类

----------------------------------------------------------------------------------------------------------------------------

#include <iostream>
using namespace std;

//class Calculate {
//public:
//
//	int getResult(string oper){
//		if (oper == "+") {
//			return m_A + m_B;
//		}
//		else if (oper == "-") {
//			return m_A - m_B;
//		}
//		else if (oper == "*") {
//			return m_A * m_B;
//		}
//	}
//
//	int m_A;
//	int m_B;
//};
//
//void test01() {
//	Calculate c;
//	c.m_A = 10;
//	c.m_B = 20;
//	cout << c.getResult("*") << endl;
//}

//开闭原则
//对扩展进行开放，对修改进行关闭

//利用多态实现计算器


class AbstractCalculator {
public:
	//纯虚函数
	//如果一个类中包含纯虚函数，那么这个类就无法实例化对象
	//抽象类的子类必须要重写基类中的纯虚函数，否则也属于抽象类
	virtual int getResult() = 0; 

	int m_A;
	int m_B;
};

//加法
class AddCalculator:public AbstractCalculator {
public:
	virtual int getResult() {
		return m_A + m_B;
	}
};

//减法
class SubCalculator :public AbstractCalculator {
public:
	virtual int getResult() {
		return m_A - m_B;
	}
};

//乘法
class MulCaculator :public AbstractCalculator {
public:
	virtual int getResult() {
		return m_A * m_B;
	}
};

class Test :public AbstractCalculator {
public:

};

void test01() {
	AbstractCalculator* caculator = new AddCalculator;

	caculator->m_A = 100;
	caculator->m_B = 200;

	cout << caculator->getResult() << endl;

	delete caculator;
	
}

int main()
{
	test01();
	//Test t;	//派生类必须重写基类中的纯虚函数，不然编译器也认为派生类是抽象类
	//AbstractCalculator a; 有纯虚函数的类称为抽象类，无法实例化对象


	return 0;
}