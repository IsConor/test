函数重载

1.满足条件
	1.1 同一个作用域
	1.2 函数名称相同
 	1.3 函数参数个数，类型， 顺序不同
2.函数的返回值 不可以作为重载条件
3.注意事项
	3.1 加const和不加const的引用可以作为重载条件
	3.2 函数重载碰到默认参数 注意避免二义性出现


#include <iostream>
using namespace std;

//函数重载的条件
//1.在同一个作用域
//2.函数名称相同
//3.参数个数、类型不同
//4.返回值不可以作为重载的条件

//class Person {
//public:
//	void func() //这是一个成员函数，不是全局函数
//	{
//
//	}
//};

void func()
{
	cout << "func()的调用" << endl;
}

void func(int a)
{
	cout << "func(int a)的调用" << endl;
}

void func(int a, double b)
{
	cout << "func(int a, double b)的调用" << endl;
}

void func(double a, int b)
{
	cout << "func(double a, int b)的调用" << endl;
}

//函数重载中引用的两个版本
void myfunc(int& a) //int &a = 10;
{
	cout << "myfunc(int &a)的调用" << endl;
}

void myfunc(const int& a) //const int &a = 10;
{
	cout << "myfunc(const int &a)的调用" << endl;
}

void test02()
{
	int a = 10;
	myfunc(10); // 不可以再加 func(int a)的版本  需要避免二义性的出现 
}

//函数重载碰到默认参数  注意避免二义性出现
void func2(int a, int b = 20)
{
	cout << "func2(int a, int b = 20)的调用" << endl;
}

void func2(int a)
{
	cout << "func2(int a)的调用" << endl;
}

void test03()
{
	func2(10);
}


int main()
{
	//func();
	//func(1);
	test02();

	return 0;
}