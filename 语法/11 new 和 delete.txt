new 和 delete

1.malloc 和 new 的区别
	1.1 malloc 和 free 属于库函数    new 和 delete 属于运算符
	1.2 malloc 不会调用构造函数  new 会调用构造函数
	1.3 malloc 返回void* C++要做强转     new 返回创建的对象的指针

2.注意事项 不要用void*去接收new出来的对象,无法调用析构

3.利用new开辟数组
	Person *pPerson = new Person[10];
	delete []pPerson;	//释放数组的语法  要加 []
4.堆区开辟数组，一定会调用默认构造
5.栈上开辟数组，可以没有默认构造


------------------------------------------------------------------------------------------------------------------

#include <iostream>
using namespace std;

class Person {
public:
	Person() {
		cout << "Person的构造函数调用" << endl;
	}

	Person(int a) {

	}

	~Person() {
		cout << "Person的析构函数调用" << endl;
	}
};

//malloc 和 new 的区别
//malloc 和 free 属于库函数    new 和 delete 属于运算符
//malloc 不会调用构造函数  new 会调用构造函数
//malloc 返回void* C++要做强转     new 返回创建的对象的指针

void test01() {
	Person* p = new Person;

	delete p;
}

//注意事项 不要用void*去接收new出来的对象,无法调用析构
void test02()
{
	void *p = new Person;

	delete p; //不会调用析构函数，无法释放
}

//利用new开辟数组
void test03()
{
	//int* pInt = new int[10];
	//double* pD = new double[10];

	//Person *pPerson = new Person[10];
	//delete []pPerson;	//释放数组的语法  

	//栈上开辟数组，可以没有默认构造
	Person  pArray[10] = { Person(10), Person(20) };
}

int main()
{
	//test01();
	//test02();
	test03();

	return 0;
}