指针运算符重载(智能指针)

1.用途：托管new出来的对象的释放
2.设计smartPoint只能指针类，内部维护 Person* ，在析构时候释放堆区new出来的Person对象
3.重载->  和 *  让sp智能指针用起来像真正的指针

-----------------------------------------------------------------------------------------------------------

#include <iostream>
using namespace std;


class Person {
public:
	Person(int age) {
		cout << "Person的有参构造的调用" << endl;
		this->m_Age = age;
	}

	~Person() {
		cout << "Person的析构函数的调用" << endl;
	}

	void showAge() {
		cout << "年龄为：" << this->m_Age << endl;
	}

	int m_Age;
};

class SmartPoint {
public:
	SmartPoint(Person* person) {
		this->m_person = person;
	}

	//重载->运算符
	Person* operator->() {
		return this->m_person;
	}

	//重载*运算符
	Person& operator*() {
		return *m_person;
	}

	~SmartPoint() {
		if (this->m_person) {
			delete this->m_person;
			this->m_person = NULL;
		}
	}

private:
	Person* m_person;
};

void test01() {
	Person* p = new Person(18); //开辟到堆区
	p->showAge();
	//(*p).showAge(); 也可以
	//delete p;

	//利用智能指针 管理new出来的Person的释放操作
	SmartPoint sp(new Person(18));

	sp->showAge(); //本质 sp->->showAge(); 编译器简化为 sp->showAge();
	(*sp).showAge();
	
}

int main()
{
	test01();

	return 0;
}