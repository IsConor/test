友元
1.全局函数作为友缘函数
	利用friend关键字让全局函数GoodGay作为本类的好朋友，可以访问私有成员 friend void goodGay(Building* building);

2.类作为友元类
	让Goodgay类作为 Building类的友元，可以访问私有成员
	friend class Goodgay;

3. 类中的成员函数作为友元
	让Goodgay类中的visit函数作为友元 friend void Goodgay::visit();

--------------------------  全局函数作为友元   --------------------------------

#include <iostream>
using namespace std;
#include <string>

class Building {
	//利用friend关键字让全局函数 goodGay作为本类的友元， 可以访问私有属性
	friend void goodGay(Building* building);
public:
	Building() {
		this->m_SittingRom = "客厅";
		this->m_BedRoom = "卧室";
	}


public:
	string m_SittingRom;
private:
	string m_BedRoom;
};

//好基友的全局函数可以访问Building的私有属性
void goodGay(Building* building) {
	cout << "好基友正在访问:" << building->m_SittingRom << endl;
	cout << "好基友正在访问:" << building->m_BedRoom << endl;
}

void test01()
{
	Building building;
	goodGay(&building);
}

int main()
{
	test01();


	return 0;
}

---------------------------------------   类作为友元  ----------------------------------------------------------------

#include <iostream>
using namespace std;

class Building;


class GoodGay {
public:
	GoodGay();

	void visit();

	Building* m_building;
};

class Building {
	//让Goodgay作为Building的友元，可以访问私有成员
	friend class GoodGay;
public:
	Building();

	string m_SittingRoom;
private:
	string m_BedRoom;
};

Building::Building() {
	this->m_SittingRoom = "客厅";
	this->m_BedRoom = "卧室";
}

GoodGay::GoodGay() {
	this->m_building = new Building;
}

void GoodGay::visit() {
	cout << "好基友正在访问:" << this->m_building->m_SittingRoom << endl;
	cout << "好基友正在访问:" << this->m_building->m_BedRoom << endl;
}

void test01() {
	GoodGay gg;
	gg.visit();
}

int main() 
{
	test01();



	return 0;
}